//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool on 2014-07-11 at 1:45
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using VKeCRM.Common.Collections;
using VKeCRM.Framework.Business;
using VKeCRM.Portal.DataTransferObjects;
using MasterDomain = VKeCRM.Portal.DataAccess.DomainObjects.Master;
using MasterDto = VKeCRM.Portal.DataTransferObjects.Master;
	
namespace VKeCRM.Portal.Business.Factories
{
	internal partial class MasterFactory : FactoryBase<MasterDto, MasterDomain>
	{
		/// <summary>
		/// Converts Domain object to Data transfer object
		/// </summary>
		/// <param name="domainObject">Domain object to convert</param>
		/// <returns>Data Transfer object</returns>
		public override MasterDto CreateDto(MasterDomain domainObject)
		{
			MasterDto dataTransferObject = null;
			
			if (domainObject != null)
			{
				dataTransferObject = new MasterDto();
                dataTransferObject.Id = domainObject.Id;
                dataTransferObject.MasterName = domainObject.MasterName;
				
				#region Customized. DO NOT REGENERATE
				// Do not change region name.
				// Put custom code here.

                dataTransferObject.Details = FactoryManager.DetailFactory.CreateListOfDtos(domainObject.Details);

				#endregion
			}
			
			return dataTransferObject;
		}
	
		/// <summary>
		/// Copies data from Data transfer object to Domain object
		/// </summary>
		/// <returns></returns>
		public override void CopyToDomainObject(MasterDto dataTransferObject, MasterDomain domainObject)
		{
			if (dataTransferObject == null || domainObject == null)
				return;
			
            domainObject.Id = dataTransferObject.Id;
            domainObject.MasterName = dataTransferObject.MasterName;
			
			#region Customized. DO NOT REGENERATE

            //create list of detail domain 
            domainObject.Details = FactoryManager.DetailFactory.CreateListOfNewDomainObjects(dataTransferObject.Details);

			#endregion
			
			return;
		}
		
		/// <summary>
		/// Creates new Domain object based on the provided Data transfer object
		/// </summary>
		/// <param name="dataTransferObject">Data transfer object</param>
		/// <returns>Detached domain object</returns>
		public override MasterDomain CreateNewDomainObject(MasterDto dataTransferObject)
		{
			MasterDomain domainObject = new MasterDomain();
			CopyToDomainObject(dataTransferObject, domainObject);
			return domainObject;
		}
		
	}
}
